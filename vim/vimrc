" ==============================================================
" Version:          1.0.0
" Date:             2019-12-04 Wed 23:36:52
" Author:           Ewen Lai
" Email:            lwwens@gmail.com
" Description:      vim config
" ==============================================================

" ==============================================================
" Vim basic config
" ==============================================================

" NOTE: required if want to like Vim defaults
set nocompatible
set number
set relativenumber
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smartindent
set hidden
set hlsearch
set ignorecase
set t_Co=256
set ttimeoutlen=50
set updatetime=100
set foldopen=all
set foldclose=all
set foldcolumn=0

" ==============================================================
" Vim Plugin settings
" ==============================================================

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-scriptease'
Plug 'mhinz/vim-startify'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'plasticboy/vim-markdown'      , { 'for': 'markdown' }
Plug 'iamcco/markdown-preview.nvim' , { 'do': { -> mkdp#util#install() },
            \ 'for': 'markdown' }
Plug 'godlygeek/tabular'            , { 'on': 'Tabularize' }
Plug 'dhruvasagar/vim-table-mode'   , { 'for': 'markdown' }
Plug 'chrisbra/csv.vim'             , { 'on': 'CSVInit' }
Plug 'vim-airline/vim-airline'
Plug 'ntpeters/vim-better-whitespace'
Plug 'MattesGroeger/vim-bookmarks'
Plug 'jmcantrell/vim-virtualenv'    , { 'for': 'python' }
Plug 'preservim/nerdtree'           , { 'on': 'NERDTreeToggle'}
Plug 'Xuyuanp/nerdtree-git-plugin'  , { 'on': 'NERDTreeToggle'}
"Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'liuchengxu/vista.vim'
Plug 'vim-syntastic/syntastic'
Plug 'mhinz/vim-grepper'            , { 'on': [ 'Grepper' ] }

call plug#end()

" inoremap <F9> <C-R>=ListMonths()<CR>
" func! ListMonths()
"   call complete(col('.'), ['January', 'February', 'March',
"   \ 'April', 'May', 'June', 'July', 'August', 'September',
"   \ 'October', 'November', 'December'])
"   return ''
" endfunc
"
"
" set the runtime path to include Vundle and initialize
set rtp+=~/.fzf

"" Code
"Plugin 'Raimondi/delimitMate'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'UltiSnips'
"Plugin 'honza/vim-snippets'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'Yggdroot/indentLine'
"" Python
"Plugin 'davidhalter/jedi-vim'
"Plugin 'nvie/vim-flake8'
"Plugin 'Vimjas/vim-python-pep8-indent'
"Plugin 'tell-k/vim-autopep8'
"
"" Fuzzy Finder
"Plugin 'Yggdroot/LeaderF'
"
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"call vundle#end()

" ==============================================================
" Vim Plugin variables
" ==============================================================

""""""""""""""""""""""
" Markdown variables "
""""""""""""""""""""""
"" https://github.com/plasticboy/vim-markdown
set conceallevel=2
let g:vim_markdown_edit_url_in = 'vsplit'
let g:vim_markdown_toc_autofit = 1

"" https://github.com/iamcco/markdown-preview.nvim
let g:mkdp_auto_close = 0

"" https://github.com/vim-airline/vim-airline
let g:airline_symbols_ascii = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
    let g:airline_symbols.linenr = ''
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.paste = ''
    let g:airline_symbols.spell = ''
    let g:airline_symbols.notexists = ''
    let g:airline_symbols.whitespace = ''
endif
" Always display tabline (must set in my vim)
let g:airline#extensions#tabline#enabled = 1
" set space as separators for the tab line
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ' '
" set path formatter in the tab line
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:powerline_pycmd = "py3"
" define the set of text to display for each mode
let g:airline_mode_map = {
            \ '__'     : '-',
            \ 'c'      : 'C',
            \ 'i'      : 'I',
            \ 'ic'     : 'I',
            \ 'ix'     : 'I',
            \ 'n'      : 'N',
            \ 'multi'  : 'M',
            \ 'ni'     : 'N',
            \ 'no'     : 'N',
            \ 'R'      : 'R',
            \ 'Rv'     : 'R',
            \ 's'      : 'S',
            \ 'S'      : 'S',
            \ ''     : 'S',
            \ 't'      : 'T',
            \ 'v'      : 'V',
            \ 'V'      : 'V',
            \ ''     : 'V',
            \ }
let g:airline_filetype_overrides = {
            \ 'nerdtree': [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ],
            \ }
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>= <Plug>AirlineSelectNextTab
let g:airline#extensions#hunks#non_zero_only = 1

"" https://github.com/MattesGroeger/vim-bookmarks
let g:bookmark_sign = '>'
let g:bookmark_annotation_sign = '#'
let g:bookmark_auto_close = 1
"let g:bookmark_location_list = 1
let g:bookmark_save_per_working_dir = 1
let g:bookmark_show_toggle_warning = 0
let g:bookmark_disable_ctrlp = 1
" Finds the Git super-project directory.
function! g:BMWorkDirFileLocation()
    let l:filename = '/.vim-bookmarks'
    " Look upwards (at parents) for a directory named '.git'
    let l:location = finddir('.git', ';')
    let l:location = strpart(l:location, 0, len(l:location) - 4)
    if len(l:location) > 0
        return l:location.l:filename
    else
        return getcwd().l:filename
    endif
endfunction
" Finds the Git super-project directory based on the file passed as an
" argument.
function! g:BMBufferFileLocation(file)
    let l:filename = '/.vim-bookmarks'
    " Look upwards (at parents) for a directory named '.git'
    let l:location = finddir('.git', fnamemodify(a:file, ':p:h').'/.;')
    let l:location = strpart(l:location, 0, len(l:location) - 4)
    if len(l:location) > 0
        return simplify(l:location.l:filename)
    else
        return simplify(fnamemodify(a:file, ':p:h').l:filename)
    endif
endfunction

"" https://github.com/chrisbra/csv.vim
let g:csv_delim = ','
let g:csv_delim_test = ',;|'
let g:csv_hiGroup = "IncSearch"
let g:csv_hiHeader = 'Pmenu'
let g:csv_highlight_column = 'y'
let g:csv_autocmd_arrange = 1

"" https://github.com/ntpeters/vim-better-whitespace
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitelines_at_eof=1
let g:strip_whitespace_confirm=0

"" https://github.com/liuchengxu/vista.vim
let g:vista#renderer#enable_icon = 0
let g:vista_fold_toggle_icons = [ '+', '-' ]
let g:vista_cursor_delay = 100
let g:vista_update_on_text_changed_delay = 100
let g:vista_stay_on_open = 0
let g:vista_icon_indent = [ '+ ', '+ ' ]

"" https://github.com/vim-ctrlspace/vim-ctrlspace
let g:CtrlSpaceSymbols = { "File": "F", "CTab": "▣", "Tabs": "T" }
hi link CtrlSpaceNormal   PMenu
hi link CtrlSpaceSelected PMenuSel
hi link CtrlSpaceSearch   Search
hi link CtrlSpaceStatus   StatusLine

"" https://github.com/airblade/vim-gitgutter
let g:gitgutter_max_signs = 200
let g:gitgutter_preview_win_floating = 1
hi link GitGutterAdd            GitSignAdd
hi link GitGutterChange         GitSignChange
hi link GitGutterDelete         GitSignAdd
hi link GitGutterChangeDelete   GitSignChange

"" https://github.com/preservim/nerdtree
let g:NERDTreeIgnore = [ '\.pyc', '\~$', '\.swp', '\.o$[[file]]',
        \ '^\.git$[[dir]]' ]
let g:NERDTreeChDirMode = 3
let g:NERDTreeShowLineNumbers = 1
let g:NERDTreeWinSize = 25
let g:NERDTreeMinimalUI = 1
let g:NERDTreeMinimalMenu = 1
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'

" Set desert as colorscheme
colorscheme desert_EwenLai

" Use those charsets supporting various Chinese edcodings
set fileencodings=utf-8,gbk,utf-16le,cp1252,iso-8859-15,ucs-bom
set termencoding=utf-8
set encoding=utf-8

"----------------------------------------
" My iabbrev
"----------------------------------------
inoreabbrev yx@ lwwens@gmail.com
inoreabbrev ccp Copyright Ewen Lai, all rights reserved.
inoreabbrev gitweb https://github.com/Ewen-ZY
inoreabbrev csdnweb https://blog.csdn.net/aq931752921
cnoreabbrev vbh vert bo h
cnoreabbrev vh vert h

"----------------------------------------
" Vim variables
"----------------------------------------
" Set MapLocalLeader
let maplocalleader = ','
let mapleader = ','

" Syntastic
let g:syntastic_error_symbol = 'E'
let g:syntastic_warning_symbol ='W'
" Automatically update the list of buttom
let g:syntastic_always_populate_loc_list = 1
" Auto open list
let g:syntastic_auto_loc_list = 1
" Check errors while opening file
let g:syntastic_check_on_open = 1
" Check errors while saving file
let g:syntastic_check_on_wq = 1
" Automatically jump to the first error or warning
let g:syntastic_auto_jump = 1

" YouCompleteMe
set completeopt=menu,menuone
let g:ycm_keep_logfiles = 1
" let g:ycm_log_level = 'debug'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_auto_trigger = 1
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:syntastic_ignore_files = [".*\.py$"]
let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }
let g:ycm_filetype_whitelist = {
            \ "c":1,
            \ "cpp":1,
            \ "desktop":1,
            \ "objc":1,
            \ "sh":1,
            \ "html":1,
            \ "zsh":1,
            \ "vim":1,
            \ "python":1,
            \ "make":1,
            \ "sudoers":1,
            \ "conf":1,
            \ "javascript":1,
            \ "xdefaults":1,
            \ "systemd":1,
            \ "yaml":1,
            \ }

" GNU global
" 原生支持的代码直接使用 gtags 本地分析器，而其他语言使用 pygments 模块
let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/share/gtags/gtags.conf'

" Markdown

" TableMode
"let g:table_mode_corner = '|'
"let g:table_mode_delimiter = ','

" Python
let g:jedi#force_py_version=3
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--ignore=E501,E225'

"----------------------------------------
" Vim keymap
"----------------------------------------
" Replace <ESC> with jk
inoremap jk <ESC>
inoremap <localleader>w <ESC>:w<CR>
nnoremap <localleader>w :w<CR>
" Convert the current word to uppercase while inserting
"inoremap <C-U> <ESC>bviwU
" Open/Close NERDTree
nnoremap <localleader>m :NERDTreeToggle<CR>
" Switch buffer
nnoremap <F4> :bprevious<CR>
nnoremap <F5> :bnext<CR>
" Goto the end line of file
nnoremap G Gzz
" Get local time
nnoremap <F2> a<C-R>=strftime("%Y-%m-%d %a %H:%M:%S")<CR><ESC>
inoremap <localleader><localleader> <localleader>

" Leaderf
nnoremap <localleader>f :LeaderfSelf<cr>

" YouCompleteMe
nnoremap <localleader>z :YcmCompleter GoToDeclaration<cr>
nnoremap <localleader>c :YcmCompleter GoToDefinition<cr>

" 插入递增的列表编号
let counter = 0
inoremap <expr> <C-L> ListItem()
inoremap <expr> <C-R> ListReset()

func ListItem()
    let g:counter += 1
    return g:counter . '. '
endfunc

func ListReset()
    let g:counter = 0
    return ''
endfunc

" Tabular mapping
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunction

"----------------------------------------
" Vim customized command
"----------------------------------------
" Json text Format
command! JsonFormat :execute '%!python -m json.tool'
            \ | :execute '%!python -c "import re,sys;chr=__builtins__.__dict__.get(\"unichr\", chr);sys.stdout.write(re.sub(r\"\\u[0-9a-f]{4}\", lambda x: chr(int(\"0x\" + x.group(0)[2:], 16)).encode(\"utf-8\"), sys.stdin.read()))"'
            \ | :set ft=javascript
            \ | :1

"----------------------------------------
" Automatically check the type of file
"----------------------------------------
" Template file
augroup Template_file
    au!
    au BufNewFile *.c 0r $HOME/.vim/template/c.template
    au BufNewFile *.cpp 0r $HOME/.vim/template/cpp.template
    au BufNewFile *.h 0r $HOME/.vim/template/h.template
    au BufNewFile *.sh 0r $HOME/.vim/template/sh.template
    au BufNewFile *.py 0r $HOME/.vim/template/py.template
augroup END

" Markdown file
augroup Markdown_file
    au!
    au BufEnter *.md nmap <C-p> <Plug>MarkdownPreviewToggle
    au BufNewFile,BufReadPost *.md set filetype=markdown
augroup END

" HTML file
augroup HTML_file
    au!
    au BufNewFile,BufReadPost *.html set filetype=html
    au FileType html nnoremap <buffer> <localleader>c I<!-- <ESC>A --><ESC>
    au BufNewFile,BufRead *.html setlocal nowrap
augroup END

" C file
augroup C_file
    au!
    au BufNewFile,BufReadPost *.c set filetype=c
augroup END

" Python
augroup Py_file
    au!
    au VimEnter *.py python3 sys.path.append('.')
    au BufWritePost *.py call Flake8()
augroup END

aug CSV_file
    au!
    au BufEnter *.csv CSVInit
    au BufEnter *.csv nnoremap <F2> a<C-R>=b:csv_result<CR><ESC>
    "au BufRead,BufWritePost *.csv :Tabularize /,/l1c1
    "au BufWritePre *.csv :%UnArrangeColumn
aug end

au BufEnter * if bufname('#') =~# '^NERD_tree_' && winnr('$') > 1
                \ | b# | endif
au bufenter * if (winnr('$') == 1 && exists('b:NERDTree') &&
                \ b:NERDTree.isTabTree()) | q | endif
